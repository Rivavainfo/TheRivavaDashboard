import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';
import { DataRow } from '@/types/dashboard';

export async function exportToPDF(data: DataRow[], filename: string = 'dashboard-report') {
  const pdf = new jsPDF('p', 'mm', 'a4');
  const pageWidth = pdf.internal.pageSize.getWidth();
  const pageHeight = pdf.internal.pageSize.getHeight();
  
  // Header
  pdf.setFillColor(64, 224, 208); // Turquoise
  pdf.rect(0, 0, pageWidth, 30, 'F');
  
  pdf.setTextColor(255, 255, 255);
  pdf.setFontSize(24);
  pdf.text('DataViz Pro - Analytics Report', 20, 20);
  
  // Date
  pdf.setFontSize(12);
  pdf.text(`Generated on: ${new Date().toLocaleDateString()}`, 20, 25);
  
  // Reset text color
  pdf.setTextColor(0, 0, 0);
  
  let yPosition = 40;
  
  // Summary Statistics
  pdf.setFontSize(16);
  pdf.text('Summary Statistics', 20, yPosition);
  yPosition += 10;
  
  const numericColumns = Object.keys(data[0] || {}).filter(key => 
    data.some(row => typeof row[key] === 'number' || !isNaN(Number(row[key])))
  );
  
  // Calculate summary stats
  if (numericColumns.length > 0) {
    const totalRecords = data.length;
    const firstNumericCol = numericColumns[0];
    const total = data.reduce((sum, row) => sum + (Number(row[firstNumericCol]) || 0), 0);
    const average = total / totalRecords;
    
    pdf.setFontSize(12);
    pdf.text(`Total Records: ${totalRecords.toLocaleString()}`, 20, yPosition);
    yPosition += 8;
    pdf.text(`Total ${firstNumericCol}: ${total.toLocaleString()}`, 20, yPosition);
    yPosition += 8;
    pdf.text(`Average ${firstNumericCol}: ${average.toFixed(2)}`, 20, yPosition);
    yPosition += 15;
  }
  
  // Data Table
  pdf.setFontSize(16);
  pdf.text('Data Sample', 20, yPosition);
  yPosition += 10;
  
  // Table headers
  const columns = Object.keys(data[0] || {}).slice(0, 5); // Limit to 5 columns for PDF
  const colWidth = (pageWidth - 40) / columns.length;
  
  pdf.setFillColor(240, 240, 240);
  pdf.rect(20, yPosition - 5, pageWidth - 40, 8, 'F');
  
  pdf.setFontSize(10);
  pdf.setFont('helvetica', 'bold');
  columns.forEach((col, index) => {
    pdf.text(col, 22 + (index * colWidth), yPosition);
  });
  
  yPosition += 10;
  pdf.setFont('helvetica', 'normal');
  
  // Data rows (first 20 rows)
  const displayData = data.slice(0, 20);
  displayData.forEach((row, rowIndex) => {
    if (yPosition > pageHeight - 30) {
      pdf.addPage();
      yPosition = 20;
    }
    
    columns.forEach((col, colIndex) => {
      const value = String(row[col] || '').substring(0, 15); // Truncate long values
      pdf.text(value, 22 + (colIndex * colWidth), yPosition);
    });
    
    yPosition += 6;
  });
  
  // Try to capture charts if they exist
  try {
    const chartElements = document.querySelectorAll('canvas');
    if (chartElements.length > 0) {
      pdf.addPage();
      pdf.setFontSize(16);
      pdf.text('Charts and Visualizations', 20, 20);
      
      let chartY = 30;
      for (let i = 0; i < Math.min(chartElements.length, 3); i++) {
        const canvas = chartElements[i];
        const imgData = canvas.toDataURL('image/png');
        const imgWidth = 160;
        const imgHeight = (canvas.height * imgWidth) / canvas.width;
        
        if (chartY + imgHeight > pageHeight - 20) {
          pdf.addPage();
          chartY = 20;
        }
        
        pdf.addImage(imgData, 'PNG', 20, chartY, imgWidth, imgHeight);
        chartY += imgHeight + 10;
      }
    }
  } catch (error) {
    console.warn('Could not capture charts for PDF:', error);
  }
  
  // Footer
  const pageCount = pdf.getNumberOfPages();
  for (let i = 1; i <= pageCount; i++) {
    pdf.setPage(i);
    pdf.setFontSize(8);
    pdf.setTextColor(128, 128, 128);
    pdf.text(`Page ${i} of ${pageCount}`, pageWidth - 30, pageHeight - 10);
    pdf.text('Generated by DataViz Pro', 20, pageHeight - 10);
  }
  
  // Save the PDF
  pdf.save(`${filename}.pdf`);
}
