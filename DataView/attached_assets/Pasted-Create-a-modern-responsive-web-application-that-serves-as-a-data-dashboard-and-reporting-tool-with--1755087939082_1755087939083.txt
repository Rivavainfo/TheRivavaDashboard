Create a modern, responsive web application that serves as a data dashboard and reporting tool with the following functionality:

Core Features:

Data Import Options:

CSV Upload: Allow the user to upload a CSV file and automatically parse it into usable data.

Firebase Connection: Allow the user to enter any Firebase Project ID and Firestore Collection Name (without needing their credentials beyond these fields) to fetch live data from that Firestore database.

The app should work with any Firebase project as long as the user provides the correct Project ID and Collection Name.

Dashboard Generation:

Create a comprehensive dashboard that visualizes the data using interactive charts and tables.

Include:

Summary statistic cards (totals, averages, counts, trends)

Multiple chart types (bar, line, pie, donut, etc.) using Chart.js or similar.

Filters and sorting options to drill down into data.

Automatically refresh the dashboard if Firestore data changes (real-time updates).

Report Export Options:

Add an Export button that allows downloading the dashboard data and visualizations as:

PDF (including charts and tables)

CSV (raw data)

Use jsPDF (or similar) for PDF generation and PapaParse (or similar) for CSV export.

Design Requirements:

Color scheme: Turquoise (#40E0D0), Black (#000000), and White (#FFFFFF).

Clean, professional, and modern layout with good typography and spacing.

Responsive design for desktop, tablet, and mobile.

Smooth animations for chart rendering and user interactions.

User Flow:

Landing page with two options:

Upload CSV file

Connect to Firestore via Firebase Project ID & Collection Name

Once data is loaded, dynamically generate the dashboard with:

KPI cards (summary metrics)

Interactive charts

Data table

Allow user to filter, search, and export data.

Technical Stack:

Frontend: HTML, CSS, JavaScript (ES6+), Bootstrap or Tailwind for styling.

Charts: Chart.js or D3.js.

PDF Export: jsPDF with html2canvas.

CSV Export: PapaParse or built-in CSV generation.

Firebase SDK: Use Firebase Web SDK to connect to Firestore and retrieve data from the given Project ID.

Extra Notes:

Ensure Firebase connection is dynamic (works with any valid Project ID without hardcoding).

Provide error handling for invalid CSV format or Firebase details.

Maintain consistent turquoise-black-white branding across all UI components.

Include hover effects, clear button styles, and a fixed position for the Export button for better UX.